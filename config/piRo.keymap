#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 6

&mt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

&lt {
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

//mouse scroll

&msc {
    delay-ms = <3>;
    trigger-period-ms = <3>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <0>;
};

#define COMBO_TIMEOUT 20

#define MOD_MORPH(name, modifiers, binding1, binding2) \
    name: name { \
        compatible = "zmk,behavior-mod-morph"; \
        bindings = <binding1>, <binding2>; \
        #binding-cells = <0>; \
        mods = <(modifiers)>; \
    };

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        click {
            bindings = <&mkp MB1>;
            key-positions = <19 20>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        rclick {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        prevclick {
            bindings = <&mkp MB4>;
            key-positions = <31 32>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        nextclick {
            bindings = <&mkp MB5>;
            key-positions = <32 33>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        pageup {
            bindings = <&kp PG_UP>;
            key-positions = <11 23>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        pagedown {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <35 23>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        ctrl+w {
            bindings = <&kp RC(W)>;
            key-positions = <23 9>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        ctrl+r {
            bindings = <&kp RC(R)>;
            key-positions = <23 7>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        ctrl+t {
            bindings = <&kp RC(T)>;
            key-positions = <23 6>;
            timeout-ms = <COMBO_TIMEOUT>;
        };

        F2combo {
            bindings = <&kp F2>;
            key-positions = <2 3>;
            timeout-ms = <COMBO_TIMEOUT>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <80>;
            quick-tap-ms = <200>;
        };
        re_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_scrl: mouse_wheel_scrl {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };

        // ALT+左右キーはマウスクリックのnext prevにする 
        MOD_MORPH(MM_LEFT_ARROW,  MOD_LALT, &kp LEFT_ARROW,  &mkp MB4)     // prev click
        MOD_MORPH(MM_RIGHT_ARROW, MOD_LALT, &kp RIGHT_ARROW, &mkp MB5)     // next click
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 3 TAB             &kp Q  &kp W      &kp E         &kp R         &kp T        &kp Y      &kp U        &kp I           &kp O           &kp P          &kp LEFT_BRACKET
&mt LCTRL ESCAPE      &kp A  &kp S      &kp D         &kp F         &kp G        &kp H      &kp J        &kp K           &kp L           &kp SEMICOLON  &kp SINGLE_QUOTE
&mt LEFT_SHIFT MINUS  &kp Z  &kp X      &kp C         &kp V         &kp B        &kp N      &kp M        &kp COMMA       &kp DOT         &kp SLASH      &lt 2 INT1
                             &mkp LCLK  &kp LEFT_WIN  &kp LEFT_ALT  &kp SPACE    &mkp RCLK  &lt 2 ENTER  &MM_LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &MM_RIGHT_ARROW
            >;

            sensor-bindings = <&mouse_scrl SCRL_UP SCRL_DOWN>, <&mouse_scrl SCRL_UP SCRL_DOWN>;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp F11
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp F12
            >;
        };

        layer_2 {
            bindings = <
&kp LANG_ZENKAKUHANKAKU  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)    &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp LS(NUMBER_8)   &kp LS(NUMBER_9)  &kp MINUS     &kp EQUAL
&kp F2                   &kp F5            &kp F7            &kp F10           &kp F11           &kp F12             &kp BACKSPACE     &mkp LCLK         &kp RIGHT_BRACKET  &kp NON_US_HASH   &mkp RCLK     &kp INT3
&none                    &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3      &kp NUMBER_4      &kp NUMBER_5        &kp NUMBER_6      &kp NUMBER_7      &kp NUMBER_8       &kp NUMBER_9      &kp NUMBER_0  &kp PRINTSCREEN
                                           &trans            &kp LANG2         &kp LANG1         &kp DELETE          &trans            &trans            &trans             &trans            &trans        &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &bootloader    &bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans        &trans        &trans        &trans        &bt BT_CLR
                &trans  &trans  &trans  &trans         &trans       &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
            >;

            sensor-bindings = <&re_kp C_VOLUME_DOWN C_VOLUME_UP>, <&re_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans  &trans  &trans  &mkp MB4
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB1  &trans  &trans  &trans  &mkp MB5
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans  &trans  &trans  &kp PG_UP
                &trans  &trans  &trans  &trans    &trans  &trans    &trans  &trans  &trans  &kp PAGE_DOWN
            >;
        };
    };
};
